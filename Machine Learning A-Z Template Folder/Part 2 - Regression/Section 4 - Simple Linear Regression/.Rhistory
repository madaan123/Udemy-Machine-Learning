print(s)
setwd("C:/Users/DELL/Udemy-Machine-Learning/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing/Section 2 -------------------- Part 1 - Data Preprocessing --------------------")
# import the dataset in dataset object
dataset=read.csv('Data.csv')
#taking care of missing data
"
is.na tells whether data is missing in the column or not
ifelse takes three parameters one for the condition to be satisfied
one for the replacement condition and last for the else condition when condition
is false
"
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN= function(x) mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN= function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
"
Now we are going to take care of categorical data as in our first and
last column in our csv file.we have three types of countries and
yes/no in last column and we have to encode them as machine learning deals
only with numbers and not strings
factor takes three parameters first name of the column,second vector which
contains categoris within that column and third is the vector that contains
encoded values.
"
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c(1,0))
"installing a new library caTools to split our datasets into
training and testing sets ans include it by using library command
"
# install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
setwd("C:/Users/DELL/Udemy-Machine-Learning/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
# import the dataset in dataset object
dataset=read.csv('Data.csv')
#taking care of missing data
"
is.na tells whether data is missing in the column or not
ifelse takes three parameters one for the condition to be satisfied
one for the replacement condition and last for the else condition when condition
is false
"
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN= function(x) mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN= function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
"
Now we are going to take care of categorical data as in our first and
last column in our csv file.we have three types of countries and
yes/no in last column and we have to encode them as machine learning deals
only with numbers and not strings
factor takes three parameters first name of the column,second vector which
contains categoris within that column and third is the vector that contains
encoded values.
"
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased=factor(dataset$Purchased,
levels = c('Yes','No'),
labels = c(1,0))
"installing a new library caTools to split our datasets into
training and testing sets ans include it by using library command
"
# install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
View(dataset)
View(dataset)
View(test_set)
View(training_set)
training_set=scale(training_set)
test_set=scale(test_set)
training_set[,2:3]=scale(training_set)
test_set[,2:3]=scale(test_set)
training_set[,2:3]=scale(training_set[,2:3])
test_set[,2:3]=scale(test_set[,2:3])
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
#dataset= dataset[, 2:3]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
setwd("C:/Users/DELL/Udemy-Machine-Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset=read.csv('Salary_Data.csv')
View(dataset)
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
# Data Preprocessing Template
# import the dataset in dataset object
dataset=read.csv('Salary_Data.csv')
#dataset= dataset[, 2:3]
"installing a new library caTools to split our datasets into
training and testing sets ans include it by using library command
"
# install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
"
machine learning models work on eucledian distances and we need to scale it as
it helps the algorithm to converge must faster
Now we are going to learn how to handle scaling in machine learning that
helps us to check whether large data entries do not overshadow
small valued entries
we have to include only those columns for scaling who have numeric values in dataset
"
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
View(test_set)
View(training_set)
regressor= lm(formula= Salary ~ YearsExperience,
data=training_set)
summary(regressor)
# Data Preprocessing Template
# import the dataset in dataset object
dataset=read.csv('Salary_Data.csv')
#dataset= dataset[, 2:3]
"installing a new library caTools to split our datasets into
training and testing sets ans include it by using library command
"
# install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Salary,SplitRatio = 2/3)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
"
machine learning models work on eucledian distances and we need to scale it as
it helps the algorithm to converge must faster
Now we are going to learn how to handle scaling in machine learning that
helps us to check whether large data entries do not overshadow
small valued entries
we have to include only those columns for scaling who have numeric values in dataset
"
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
" Fitting simple linear regression to the training set
train the regressor on training set
"
#formula shows salary is related to years of experience
# data shows the data on which we want to perform regression
regressor= lm(formula= Salary ~ YearsExperience,
data=training_set)
"
we can check details of our regression by typing summary(regression on console)
it shows the number of stars higher the number more is the dependency of
dependent column on independent set and lesser the p value more is independent
variable statistically significant
"
y_pred=predict(regressor, newdata = test_set)
y_pred
install.packages('ggplot2')
install.packages('ggplot2')
library("ggplot2", lib.loc="~/R/win-library/3.4")
library(ggplot2)
library(ggplot2)
"
Now we have to plot the datapoints and linear regression line
geom_point is used to scatter plot all our obervations points of training set
aes-aesthetic function specifies the x and y variables of the plot
geom_line is used to plot the regression line
xlab and ylab for labelling x and y coordinates
"
ggplot2() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour= 'red' ) +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour='blue') +
ggtitle('salary vs Experience(Training Set)') +
xlab('Years of experience') +
ylab('salary')
library(ggplot2)
"
Now we have to plot the datapoints and linear regression line
geom_point is used to scatter plot all our obervations points of training set
aes-aesthetic function specifies the x and y variables of the plot
geom_line is used to plot the regression line
xlab and ylab for labelling x and y coordinates
"
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour= 'red' ) +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour='blue') +
ggtitle('salary vs Experience(Training Set)') +
xlab('Years of experience') +
ylab('salary')
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour= 'red' ) +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour='blue') +
ggtitle('salary vs Experience(Test Set)') +
xlab('Years of experience') +
ylab('salary')
